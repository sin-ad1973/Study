{"remainingRequest":"/Users/onozatoshin/.nodebrew/node/v11.1.0/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/onozatoshin/Desktop/Develop/Study/vue_js/private/sfcdir/svg_graph/src/svg-arc-graph.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/onozatoshin/Desktop/Develop/Study/vue_js/private/sfcdir/svg_graph/src/svg-arc-graph.vue","mtime":1580986570936},{"path":"/Users/onozatoshin/.nodebrew/node/v11.1.0/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/onozatoshin/.nodebrew/node/v11.1.0/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/onozatoshin/.nodebrew/node/v11.1.0/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\n * Mは”Move to”の略で、指定した座標の位置へ移動する。\n *   まずこのコマンドで、円の中心点の座標を指定する。\n * Lは”Line to”の略で、現在位置の座標から指定した座標へ線を引く。\n *   このコマンドで、円の中心点から円弧の描き始めの点、つまり扇形の一つの半径を描く。\n *   このコマンドに指定する引数は、円弧の描き始めの座標である。\n * Aはarc要素で、円弧を描く。このコマンドが一番重要である。\n *   半径や円弧の描き終わりの座標など引数に色々と指定しないといけないが、後に詳しく説明する。\n * Zは”Close path”というコマンドで、現在の座標から最初に指定した座標まで線を引く。\n *   このコマンドで円弧の描き終わりの点から中心点までの線、つまり扇形のもう一つの半径を描く。\n * \n * \n * Aコマンドは以下の7つの引数を指定する。\n * rx ry x-axis-rotation large-arc-flag sweep-flag x y\n * 第一引数はx軸の半径、第二引数はy軸の半径で、楕円を描かないのであれば同じ値を指定する。\n * 第三引数は円弧の回転度を指定できるが、ここでは必要ないので0を指定する。\n * 第四引数は円弧が180度以上かどうかを指定する。180度より小さければ0、大きければ1を指定する。\n *   ちなみに180度ちょうどはどちらでもよい。\n * 第五引数は2つの点を反時計回りで繋ぐか時計回りで繋ぐかの違いで、今回は時計回りで統一し常に1を指定する。\n * 第六引数は円弧の描き終わりのx座標、第七引数はy座標である。\n */\nexport default {\n    name: 'SvgArcGraph', // vue component name\n    props: {\n        stats: {\n            type: Array,\n            default: [\n                { label: 'A', value: 100 },\n                { label: 'B', value: 100 },\n                { label: 'C', value: 100 },\n                { label: 'D', value: 100 },\n                { label: 'E', value: 100 },\n                { label: 'F', value: 100 }\n            ],\n        },\n        radius: {\n            type: Number,\n            default: 150,\n        },\n        fillStyle: {\n            type: String,\n            default: \"rgb(255, 0, 0)\",\n        },\n        arcPathA: {\n            type: String,\n            default: \"M 150 150 L 150 0 A 150 150 0 0 1 300 150 Z\",\n        },\n        arcPathB: {\n            type: String,\n            default: \"M 150 150 L 300 150 A 150 150 0 0 1 150 300 Z\",\n        },\n        arcPathC: {\n            type: String,\n            default: \"M 150 150 L 150 300 A 150 150 0 0 1 0 150 Z\",\n        },\n        arcPathD: {\n            type: String,\n            default: \"M 150 150 L 0 150 A 150 150 0 0 1 150 0 Z\",\n        },\n    },\n    computed: {\n        points: function() {\n            const total = this.stats.length;\n            const self = this;\n            const ret = this.stats.map((stat, i) => {\n                const point = this.valueToPoint(stat.value, i, total)\n                return point.x + ',' + point.y\n            }).join(' ');\n            return ret;\n        },\n    },\n    methods: {\n        valueToPoint(value, index, total) {\n            var x     = 0\n            var y     = -value * 0.8\n            var angle = Math.PI * 2 / total * index\n            var cos   = Math.cos(angle)\n            var sin   = Math.sin(angle)\n            var tx    = x * cos - y * sin + 100\n            var ty    = x * sin + y * cos + 100\n            return {\n                x: tx,\n                y: ty\n            }\n        },\n    },\n}\n",{"version":3,"sources":["svg-arc-graph.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"svg-arc-graph.vue","sourceRoot":"src","sourcesContent":["<template>\n    <div>\n        <svg>\n            <g class=\"arc\">\n                <path fill=\"#f00\" :d=\"arcPathA\" />\n                <path fill=\"#0f0\" :d=\"arcPathB\" />\n                <path fill=\"#00f\" :d=\"arcPathC\" />\n                <path fill=\"#ff0\" :d=\"arcPathD\" />\n            </g>\n        </svg>\n    </div>\n</template>\n\n<script>\n/**\n * Mは”Move to”の略で、指定した座標の位置へ移動する。\n *   まずこのコマンドで、円の中心点の座標を指定する。\n * Lは”Line to”の略で、現在位置の座標から指定した座標へ線を引く。\n *   このコマンドで、円の中心点から円弧の描き始めの点、つまり扇形の一つの半径を描く。\n *   このコマンドに指定する引数は、円弧の描き始めの座標である。\n * Aはarc要素で、円弧を描く。このコマンドが一番重要である。\n *   半径や円弧の描き終わりの座標など引数に色々と指定しないといけないが、後に詳しく説明する。\n * Zは”Close path”というコマンドで、現在の座標から最初に指定した座標まで線を引く。\n *   このコマンドで円弧の描き終わりの点から中心点までの線、つまり扇形のもう一つの半径を描く。\n * \n * \n * Aコマンドは以下の7つの引数を指定する。\n * rx ry x-axis-rotation large-arc-flag sweep-flag x y\n * 第一引数はx軸の半径、第二引数はy軸の半径で、楕円を描かないのであれば同じ値を指定する。\n * 第三引数は円弧の回転度を指定できるが、ここでは必要ないので0を指定する。\n * 第四引数は円弧が180度以上かどうかを指定する。180度より小さければ0、大きければ1を指定する。\n *   ちなみに180度ちょうどはどちらでもよい。\n * 第五引数は2つの点を反時計回りで繋ぐか時計回りで繋ぐかの違いで、今回は時計回りで統一し常に1を指定する。\n * 第六引数は円弧の描き終わりのx座標、第七引数はy座標である。\n */\nexport default {\n    name: 'SvgArcGraph', // vue component name\n    props: {\n        stats: {\n            type: Array,\n            default: [\n                { label: 'A', value: 100 },\n                { label: 'B', value: 100 },\n                { label: 'C', value: 100 },\n                { label: 'D', value: 100 },\n                { label: 'E', value: 100 },\n                { label: 'F', value: 100 }\n            ],\n        },\n        radius: {\n            type: Number,\n            default: 150,\n        },\n        fillStyle: {\n            type: String,\n            default: \"rgb(255, 0, 0)\",\n        },\n        arcPathA: {\n            type: String,\n            default: \"M 150 150 L 150 0 A 150 150 0 0 1 300 150 Z\",\n        },\n        arcPathB: {\n            type: String,\n            default: \"M 150 150 L 300 150 A 150 150 0 0 1 150 300 Z\",\n        },\n        arcPathC: {\n            type: String,\n            default: \"M 150 150 L 150 300 A 150 150 0 0 1 0 150 Z\",\n        },\n        arcPathD: {\n            type: String,\n            default: \"M 150 150 L 0 150 A 150 150 0 0 1 150 0 Z\",\n        },\n    },\n    computed: {\n        points: function() {\n            const total = this.stats.length;\n            const self = this;\n            const ret = this.stats.map((stat, i) => {\n                const point = this.valueToPoint(stat.value, i, total)\n                return point.x + ',' + point.y\n            }).join(' ');\n            return ret;\n        },\n    },\n    methods: {\n        valueToPoint(value, index, total) {\n            var x     = 0\n            var y     = -value * 0.8\n            var angle = Math.PI * 2 / total * index\n            var cos   = Math.cos(angle)\n            var sin   = Math.sin(angle)\n            var tx    = x * cos - y * sin + 100\n            var ty    = x * sin + y * cos + 100\n            return {\n                x: tx,\n                y: ty\n            }\n        },\n    },\n}\n</script>\n\n<style scoped>\nsvg {\n    overflow: visible;\n}\n\n.arc {\n    border-color: rgb(0, 0, 0);\n}\n</style>\n"]}]}